AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Lambda with EventBridge rule to notify Jira token expiry using existing IAM role daily 9 AM IST,
  sends alert even on errors with SNS email notifications.
  ----------------------------------------------------------------------
  âœ… Required Secret in Secrets Manager (example JSON format):
  {
    "token": "your-jira-api-token",
    "expiryDate": "2025-09-30T00:00:00Z"
  }
  ----------------------------------------------------------------------

Parameters:
  ExistingLambdaRoleArn:
    Type: String
    Description: ARN of your existing IAM role with Lambda + SecretsManager + SNS permissions
    Default: arn:aws:iam::833376745199:role/AcrJiraTokenExpiryAccessAutomationRole   # <-- Replace

Resources:
  # SNS Topic for alerts
  JiraTokenExpirySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: JiraTokenExpiryAlerts

  # SNS Subscriptions (multiple emails)
  JiraTokenExpirySNSSubscription1:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref JiraTokenExpirySNSTopic
      Protocol: email
      Endpoint: daya.8@partner.samsung.com

  JiraTokenExpirySNSSubscription2:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref JiraTokenExpirySNSTopic
      Protocol: email
      Endpoint: rakshith.r@samsung.com

  JiraTokenExpirySNSSubscription3:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref JiraTokenExpirySNSTopic
      Protocol: email
      Endpoint: adsblr.ri@samsung.com   

  # Lambda Function using existing IAM role
  AcrJiraTokenExpiryCheckLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AcrJiraTokenExpiryCheckLambda
      Runtime: python3.13
      Role: !Ref ExistingLambdaRoleArn
      Handler: index.lambda_handler
      Timeout: 600
      Environment:
        Variables:
          SECRET_NAME: "jira/api/token"   # <-- Replace if your secret name is different
          SNS_TOPIC_ARN: !Ref JiraTokenExpirySNSTopic
      Code:
        ZipFile: |
          import boto3
          import json
          from datetime import datetime, timezone
          import os

          secrets_client = boto3.client("secretsmanager")
          sns_client = boto3.client("sns")
          
          SECRET_NAME = os.environ["SECRET_NAME"]
          SNS_TOPIC_ARN = os.environ["SNS_TOPIC_ARN"]

          def lambda_handler(event, context):
              try:
                  secret_value = secrets_client.get_secret_value(SecretId=SECRET_NAME)
                  secret = json.loads(secret_value.get("SecretString", "{}"))
                  
                  token = secret.get("token", None)
                  expiry_str = secret.get("expiryDate", None)
                  
                  if not token:
                      raise ValueError("Token not found in secret.")
                  if not expiry_str:
                      raise ValueError("expiryDate not found in secret.")
                  
                  expiry_date = datetime.fromisoformat(expiry_str.replace("Z", "+00:00"))
                  days_left = (expiry_date - datetime.now(timezone.utc)).days

                  if days_left <= 15:
                      message = (
                          f"Hello Team, \n"
                          f"Jira API token in `{SECRET_NAME}` is expiring in {days_left} days. "
                          f"Kindly rotate token before its expiry in AWS Secret Manager.\n"
                          f"(expiry: {expiry_date.date()})\n"
                          f"Token (masked): {token[:4]}****\n"
                          f"AWS Secret location: https://us-east-1.console.aws.amazon.com/secretsmanager/secret?name=jira%2Fapi%2Ftoken&region=us-east-1\n\n\n"
                          f"Thank you\n"
                          f"ACR SRE TEAM\n"
                      )
                      sns_client.publish(
                          TopicArn=SNS_TOPIC_ARN,
                          Subject="Jira API Token Expiry Alert",
                          Message=message
                      )

              except Exception as e:
                  error_message = (
                      f"ERROR in JIRA TOKEN in AWS SECRET MANAGER \n\n"
                      f"Please check JIRA TOKEN in AWS SECRET MANAGER and Lambda function.\n\n"
                      f"Error: {str(e)}\n"
                  )
                  try:
                      sns_client.publish(
                          TopicArn=SNS_TOPIC_ARN,
                          Subject="Jira Token in AWS SECRET ERROR Alert",
                          Message=error_message
                      )
                  except Exception as sns_err:
                      print("Failed to send SNS error alert:", sns_err)

  # EventBridge Rule to trigger Lambda daily at 9 AM IST
  LambdaScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: AcrJiraLambdaRuleDaily9amIST
      ScheduleExpression: cron(30 3 * * ? *) #  Runs every day 9 AM IST (03:30 UTC)
      State: ENABLED
      Targets:
        - Arn: !GetAtt AcrJiraTokenExpiryCheckLambda.Arn
          Id: "TargetLambda"

  # Permission for EventBridge to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AcrJiraTokenExpiryCheckLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaScheduleRule.Arn

Outputs:
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref AcrJiraTokenExpiryCheckLambda
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt AcrJiraTokenExpiryCheckLambda.Arn
  RuleName:
    Description: Name of the EventBridge rule
    Value: !Ref LambdaScheduleRule
  SNSTopicArn:
    Description: ARN of the SNS topic
    Value: !Ref JiraTokenExpirySNSTopic
  SubscriptionEmails:
    Description: Emails subscribed for alerts
    Value: "daya.8@partner.samsung.com, adsblr.ri@samsung.com, rakshith.r@samsung.com"
